#NAMES IN THE WORKFLOW NEED TO BE STANDARDISED
#Before starting, make sure to unzip the fastq files. Also do an interactive session and load R/4.2.1. Can use gzip -d command on terminal to do this
library(dada2)
path <- "/gpfs/home/yfe22ruu/Fastq_files_all"
#The list files command should list all the paired end reads for each sample.
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Plot the Read Quality for the forward and reverse paired end reads and put them in separate PDFs
pdf(file = "Read_Quality_Profiles.pdf", width = 4, height = 4)
plotQualityProfile(fnFs)
plotQualityProfile(fnRs)
dev.off()

# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, maxEE=c(10,10), minQ=1, truncQ=1, rm.phix=TRUE, compress=TRUE, multithread=FALSE)

print(out)

errF <- learnErrors(filtFs, multithread=FALSE)
errR <- learnErrors(filtRs, multithread=FALSE)

pdf(file = "Error_Plots.pdf", width = 4, height = 4)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dev.off()

dadaFs <- dada(filtFs, err=errF, multithread=FALSE)
dadaRs <- dada(filtRs, err=errR, multithread=FALSE)
dadaFs[[1]]

mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])

seqtab <- makeSequenceTable(mergers)
dim(seqtab)

table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab)

#Track Number of Reads through the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)

db_path = "/gpfs/home/yfe22ruu/GTDB_bac-arc_ssu_r86.fa.gz"

taxa <- assignTaxonomy(seqtab.nochim, db_path, multithread=FALSE)
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
print(taxa.print)
taxa.print.df <- as.data.frame(taxa.print)
track.df <- as.data.frame(track)
seqtab.nochim.df <- as.data.frame(seqtab.nochim)
write.csv(file = "Taxa_Print.csv", taxa.print.df)
write.csv(file = "Read_Tracker.csv", track.df)
write.csv(file = "Seqtab_Nochim.csv", seqtab.nochim.df)

library(phyloseq)
library(vegan)
library(ggplot2)
library(ape)
library(tidyverse)
library(microViz)
library(factoextra)
library(cluster)
library(htmlwidgets)

set.seed(89)
colnames(seqtab.nochim.df) <- c(1:ncol(seqtab.nochim.df))
colnames(seqtab.nochim.df) <- paste("ASV", colnames(seqtab.nochim.df), sep = "_")
seqtab.nochim.relative.df <- decostand(seqtab.nochim.df, method='total', MARGIN = 1)
rownames(taxa.print.df) <- colnames(seqtab.nochim.df)
taxa.print.matrix <- as.matrix(taxa.print.df)
metadata.df <- read.csv("Metadata.csv", header = TRUE, row.names = 1)

#Preparing and Creating the Phyloseq Object
otu_tab <- otu_table(seqtab.nochim.df, taxa_are_rows = FALSE)
sample_dat <- sample_data(metadata.df)
tax_dat <- tax_table(taxa.print.matrix)
ps <- merge_phyloseq(otu_tab, sample_dat, tax_dat)
rank_names(ps)

#Genus Level Phyloseq Object
ps_genus <- tax_glom(ps, "Genus")
p1 <- plot_bar(ps_genus, fill = "Genus")
ggsave(filename = 'ps_genus.pdf', plot=p1, width=30, height=8)

#Family Level Phyloseq Object
ps_family <- tax_glom(ps, "Family")
p2 <- plot_bar(ps_family, fill = "Family")
ggsave(filename = "ps_family.pdf", plot = p2, width = 30, height = 8)

#Order Level Phyloseq Object
ps_order <- tax_glom(ps, "Order")
p3 <- plot_bar(ps_order, fill = "Order")
ggsave(filename = "ps_order.pdf", plot = p3, width = 30, height = 8)

#Class Level Phyloseq Object
ps_class <- tax_glom(ps, "Class")
p4 <- plot_bar(ps_class, fill = "Class")
ggsave(filename = "ps_class.pdf", plot = p4, width = 30, height = 8)

#Phylum Level Phyloseq Object
ps_phylum <- tax_glom(ps, "Phylum")
p5 <- plot_bar(ps_phylum, fill = "Phylum")
ggsave(filename = "ps_phylum.pdf", plot = p5, width = 30, height = 8)

#Kingdom Level Phyloseq Object
ps_kingdom <- tax_glom(ps, "Kingdom")
p6 <- plot_bar(ps_kingdom, fill = "Kingdom")
ggsave(filename = "ps_kingdom.pdf", plot = p6, width = 30, height = 8)

#Making This Interactive with Plotly and Viewing it on the local browser. This does it for the entire phyloseq object
#ps_updated <- tax_fix(ps) %>% phyloseq_validate()
#ord_explore(ps_updated)

#Heatmap - SEE IF YOU CAN USE ps_genus AND ps_family FOR THIS
genus_heatmap <- plot_heatmap(ps, "PCoA", "manhattan", taxa.label = "Genus", taxa.order = "Genus", low = "#66CCFF", high = "#000033", na.value = "white")
ggsave(filename = "genus_heatmap.pdf", plot = genus_heatmap, width = 30, height = 8)
family_heatmap <- plot_heatmap(ps, "PCoA", "manhattan", taxa.label = "Family", taxa.order = "Family", low = "#66CCFF", high = "#000033", na.value = "white")
ggsave(filename = "family_heatmap.pdf", plot = genus_heatmap, width = 30, height = 8)

#Plot Ordination
ps.ord <- ordinate(ps, "PCoA", "manhattan")
p1 <- plot_ordination(ps, ps.ord, type = "taxa", color = "Genus", title = "Genus Ordination Plot")
ggsave(filename = "Genus_PCOA.pdf", plot = p1, width = 30, height = 8)
p2 <- plot_ordination(ps, ps.ord, type = "taxa", color = "Family", title = "Family Ordination Plot")
ggsave(filename = "Family_PCOA.pdf", plot = p2, width = 30, height = 8)
p3 <- plot_ordination(ps, ps.ord, type = "samples", label = "sample_id", color = "metastasis", title = "Metastatic Samples")
ggsave(filename = "Metastatic Samples.pdf", plot = p3, width = 30, height = 8)
p4 <- plot_ordination(ps, ps.ord, type = "samples", label = "sample_id", color = "subcategory_at_initial_urine_collection", title = "Subcategory at Initial Urine Collection")
ggsave(filename = "Subcategory at Initial Urine Collection.pdf", plot = p4, width = 30, height = 8)

#PCOA Plot After Extracting Co-Ordinates
class(seqtab.nochim.relative.df)
seqtab_matrix <- as.matrix(seqtab.nochim.relative.df)
dist_matrix_genus <- dist(seqtab_matrix, method = "manhattan")
pcoa_genus <- pcoa(dist_matrix_genus, correction = "none", rn = NULL)
biplot_genus <- biplot(pcoa_genus, plot.axes = c(1,2), dir.axis1=1, dir.axis2=1, rn = NULL, main = NULL)
pdf(file = "Genus_Biplot.pdf", width = 8, height = 8)
biplot_genus <- biplot(pcoa_genus, plot.axes = c(1,2), dir.axis1=1, dir.axis2=1, rn = NULL, main = NULL)
dev.off()

#Extract the Axis co-ordinates and do K-Means on them
pcoa_genus$vectors
pcoa_coords <- as.data.frame(pcoa_genus$vectors)
head(pcoa_coords)
pcoa_coords_final1 <- as.data.frame(pcoa_coords$Axis.1)
pcoa_coords_final2 <- as.data.frame(pcoa_coords$Axis.2)
pcoa_coords_genus_final <- cbind(pcoa_coords_final1, pcoa_coords_final2)
kmeans_genus <- kmeans(pcoa_coords_genus_final, 3, nstart = 20)
kmeans_genus
kmeans_plot <- plot(pcoa_coords_genus_final, col = (kmeans_genus$cluster + 1), main = "K-Means Clustering of Samples - May 2022", xlab = "", ylab = "", pch = 20, cex = 2)
ggsave(filename = "KMeansClustering.pdf", plot = kmeans_plot, width = 30, height = 8)
kmeans_clusterdata <- as.data.frame(kmeans_genus$cluster)
sample_list <- cbind(kmeans_clusterdata, pcoa_coords_genus_final)
head(sample_list)
rownames(seqtab_absolute_noblanks)
rownames(sample_list) <- rownames(seqtab_absolute_noblanks)
head(sample_list)
sample_cluster_list <- cbind(sample_list, metadata_noblanks)
head(sample_cluster_list)
sample_cluster_list2 <- sample_cluster_list[, -4]
sample_cluster_list2 <- sample_cluster_list2[, -10]
head(sample_cluster_list2)
write.csv(file = "Sample_Cluster_List.csv", sample_cluster_list)
sample_cluster_plot <- ggplot(sample_cluster_list2, aes(x=pcoa_coords$Axis.1, y=pcoa_coords$Axis.2, color = metastasis)) + geom_point(alpha = 0.5, size = 2) + geom_text(aes(label = rownames(sample_list)))
ggsave(filename = "Sample_Cluster_Plot.pdf", plot = sample_cluster_plot, width = 30, height = 8)
