install.packages("readxl")
library(readxl)
install.packages("ggplot2")
library(ggplot2)
install.packages("phyloseq")
library(phyloseq)
install.packages("magrittr")
library(magrittr)
install.packages("tidyverse")
library(tidyverse)
install.packages("FactoMineR")
library(FactoMineR)
install.packages("vegan")
library(vegan)
install.packages("ape")
library(ape)
install.packages("factoextra")
library(factoextra)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("aPCoA")
library(aPCoA)
install.packages("grDevices")
library(grDevices)
install.packages("ggpubr")
library(ggpubr)
install.packages("writexl")
library(writexl)
install.packages("survival")
library(survival)
install.packages("ggsurvfit")
library(ggsurvfit)
install.packages("tidycmprsk")
library(tidycmprsk)
install.packages("lubridate")
library(lubridate)
install.packages("gplots")
library(gplots)
install.packages("pheatmap")
library(pheatmap)
install.packages("circlize")
library(circlize)
#ComplexHeatMap Installation
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
install.packages("colorspace")
library(colorspace)
install.packages("dada2")
#Before starting, make sure to unzip the fastq files. Can use gzip -d command on terminal to do this
library(dada2)
path <- "~/Fastq"
#The list files command should list all the paired end reads for each sample.
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Plot the Read Quality for the forward and reverse paired end reads and put them in separate PDFs
pdf(file = "~/Fastq/Read_Quality_Profiles_FWD.pdf")
plotQualityProfile(fnFs[1:8])
plotQualityProfile(fnFs[9:16])
plotQualityProfile(fnFs[17:24])
plotQualityProfile(fnFs[25:32])
plotQualityProfile(fnFs[33:40])
plotQualityProfile(fnFs[41:48])
plotQualityProfile(fnFs[49:56])
plotQualityProfile(fnFs[57:64])
plotQualityProfile(fnFs[65:72]).
dev.off()
pdf(file = "~/Fastq/Read_Quality_Profiles_REV.pdf")
plotQualityProfile(fnRs[1:8])
plotQualityProfile(fnRs[9:16])
plotQualityProfile(fnRs[17:24])
plotQualityProfile(fnRs[25:32])
plotQualityProfile(fnRs[33:40])
plotQualityProfile(fnRs[41:48])
plotQualityProfile(fnRs[49:56])
plotQualityProfile(fnRs[57:64])
plotQualityProfile(fnRs[65:72]).
dev.off()

# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(290,250), #=c(280,200),maxN=0, maxEE=c(10,10), minQ=2, truncQ=2, rm.phix=TRUE, compress=TRUE, multithread=TRUE)
              
print(out)

errF <- learnErrors(filtFs, multithread=FALSE)
errR <- learnErrors(filtRs, multithread=FALSE)

pdf(file = "~/Fastq/Error_Plots.pdf")
plotErrors(errF, nominalQ=TRUE)
dev.off()

dadaFs <- dada(filtFs, err=errF, multithread=FALSE)
dadaRs <- dada(filtRs, err=errR, multithread=FALSE)
dadaFs[[1]]

mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])

seqtab <- makeSequenceTable(mergers)
dim(seqtab)

table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab)

#Track Number of Reads through the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)

db_path = "~/"GTDB_bac-arc_ssu_r86.fa.gz"

taxa <- assignTaxonomy(seqtab.nochim, db_path, multithread=FALSE)
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)

#This is the Phyloseq Part of the Pipeline

#samdf <- Change this to read in the sample metadata from an excel file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(samdf), tax_table(taxa))
setwd('~/Fastq')
rank_names(ps)
ps_genus <- tax_glom(ps, "Genus")
p1 <- plot_bar(ps_genus, fill = "Genus")
ggsave(filename = 'ps_genus.pdf', plot=p1, width=30, height=8)

#Trying to Create a Phylogenetic Tree with the Ape package and then a Heatmap
prog_data <- sample_data(data.frame(Progression = samdf$progression, Progression_Days = samdf$progression_days, row.names = sample_names(ps), stringsAsFactors = FALSE))
head(prog_data)
library("ape")
genus_tree <- rtree(ntaxa(ps), rooted = TRUE, tip.label = taxa_names(ps))
plot(genus_tree)

genus_phyloseq <- merge_phyloseq(ps, prog_data, genus_tree)
genus_phyloseq
plot_tree(genus_phyloseq, color = "Progression_Days", label.tips = "taxa_names(ps)", ladderize = "left", plot.margin = 0.3)
plot_heatmap(genus_phyloseq, taxa.label = "Genus", taxa.order = "Genus")

#Make this Biplot look better - Phyloseq package has functions for ordination including using Manhattan Distances
ps_ord <- ordinate(ps, "PCoA", "manhattan")
plot_ps_otus_ord_mets <- plot_ordination(ps, ps_ord, type = "otu", label = "Genus", color = "Genus")
plot_ps_samples_ord_mets <- plot_ordination(ps, ps_ord, type = "samples", label = "X.SampleID", color = "metastasis")
plot_ps_samples_ord_mets
plot_ps_samples_ord_progression <- plot_ordination(ps, ps_ord, type = "samples", label = "X.SampleID", color = "Progression")
plot_ps_samples_ord_progression
plot_ps_samples_ord_category1 <- plot_ordination(ps, ps_ord, type = "samples", label = "X.SampleID", color = "Category1")
plot_ps_samples_ord_category1
plot_ps_samples_ord_category2 <- plot_ordination(ps, ps_ord, type = "samples", label = "X.SampleID", color = "Category2")
plot_ps_samples_ord_category2 
plot_ps_samples_ord_clincat <- plot_ordination(ps, ps_ord, type = "samples", label = "X.SampleID", color = "ClinicalCategory")
plot_ps_samples_ord_clincat

#K-Means Clustering On the Samples with the co-ordinates extracted from the PCOA plot - The phyloseq package uses ggplot so you can just use ggplot_build and proceed from there

data_from_ps_samples_ord_mets <- ggplot_build(plot_ps_samples_ord_mets)
data_from_ps_samples_ord_mets$data
df_data_from_ps_samples_ord_mets <- as.data.frame(data_from_ps_samples_ord_mets$data)
colnames(df_data_from_ps_samples_ord_mets)
kmeans_df_ps <- df_data_from_ps_samples_ord_mets[,c('x','y')]
head(kmeans_df_ps)
cluster_ps <- kmeans(kmeans_df_ps, 3, nstart = 20)
fviz_cluster(cluster_ps, data = kmeans_df_ps, palette = c("#2E9FDF", "#00AFBB", "#E7B800"), geom = "point", ellipse.type = "convex", ggtheme = theme_bw(), main = "Clusters of Patient Samples")
